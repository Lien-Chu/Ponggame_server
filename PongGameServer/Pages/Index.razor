@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime
@using System.Threading.Tasks
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

<PageTitle>Index</PageTitle>

<div class="form-group">
	<label>
		Player name:
		<input @bind="user" />
	</label>
	<br /> <br />
	<button type="button" class="btn btn-success" @onclick="HandleJoinGame" disabled="@(!IsConnected)">Join the Game</button>

</div>
<br />

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>
<hr>
<div id="canvasContainer">
	<canvas id="canvas" width="640" height="280"></canvas>
</div>

@code {
	private HubConnection? hubConnection;
	private List<string> messages = new List<string>();
	private string? user;
	private int _playerId = 1;
	private static int playerNo = 1; // use something like this to keep track of the number of connected players
	private bool _isGameStarted = false;
	private int paddle_l;
	private int paddle_r;
	private int _ballX;
	private int _ballY;
	private int ballDX;
	private int ballDY;
	//private int playerCount = 0;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("import", "/javascript/canvas.js");	
		}
	}

	private async Task HandleJoinGame()
	{
		if (hubConnection is not null)
		{

			await hubConnection.SendAsync("SendMessage", user);
			_playerId++;
		}
	}

	public bool IsConnected =>
		hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
			.Build();

		hubConnection.On<string>("NewPlayerJoinedCommand", (user) =>
		{
			var encodedMsg = $"{user}" + " has joined the game!! Your ID = " + $"{_playerId}" + ". Your playerNo =" + $"{playerNo}!";
			messages.Add(encodedMsg);
			Console.WriteLine($"playerNo _playerId just connected, we should set the player id and increment playerNo");
			playerNo++;
			Console.WriteLine($"playerNo is now {playerNo} the next player that connects will be {playerNo}");
			InvokeAsync(StateHasChanged);
			if (playerNo >= 2)
			{
				//tell gamehub its time to start the game
				// let ball draw on the both players screen at same time

				StartGame();
				JSRuntime.InvokeVoidAsync("import", "/javascript/drawBall.js");
			}
		});

		hubConnection.On<int, int>("PaddleMoved", (playerId, newY) =>
		{
			if (playerId == 1)
			{
				paddle_l = newY;
				hubConnection.SendAsync("PaddleMoved", newY);
			}
			else if (playerId == 2)
			{
				paddle_r = newY;
				hubConnection.SendAsync("PaddleMoved", newY);
			}
		});

		await hubConnection.StartAsync();
	}

	//use DrawBall() if 2 players are connected

	public void StartGame()
	{
		if (hubConnection is not null)
		{
			hubConnection.On<int, int>("BallMoved", (newX, newY) =>
			{
				_ballX = newX;
				_ballY = newY;
				InvokeAsync(StateHasChanged);
				JSRuntime.InvokeVoidAsync("updateBallPosition", _ballX, _ballY);
				hubConnection.SendAsync("BallMoved", _ballX, _ballY);
			});
		}
	}


	//private async Task OnKeyDown(KeyboardEventArgs e)
	//{
	//	if (e.Code == "ArrowUp")
	//	{
	//		if (hubConnection is not null)
	//		{
	//			paddle_l -= 20;

	//			if (paddle_l < 0)
	//			{
	//				paddle_l = 0;
	//			}
	//			else if (paddle_l > 200)
	//			{
	//				paddle_l = 200;
	//			}
	//			await hubConnection.SendAsync("MovePaddle", 1, paddle_l - 20);
	//		}
	//	}
	//	else if (e.Code == "ArrowDown")
	//	{
	//		if (hubConnection is not null)
	//		{
	//			paddle_l += 20;

	//			if (paddle_l < 0)
	//			{
	//				paddle_l = 0;
	//			}
	//			else if (paddle_l > 200)
	//			{
	//				paddle_l = 200;
	//			}
	//			await hubConnection.SendAsync("MovePaddle", 1, paddle_l + 20);
	//		}
	//	}
	//}
}
