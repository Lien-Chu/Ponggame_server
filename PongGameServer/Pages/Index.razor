@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<div class="form-group">
	<label>
		Player name:
		<input @bind="user" />
	</label>
	<br /> <br />
	<button type="button" class="btn btn-success" @onclick="Send" disabled="@(!IsConnected)">Join the Game</button>

</div>
<br />

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>
<hr>
<div id="canvasContainer">
	<canvas id="canvas" width="640" height="280"></canvas>
</div>

@code {
	private HubConnection? hubConnection;
	private List<string> messages = new List<string>();
	private string? user;
	private int _playerId = -1;
	private bool _isGameStarted = false;
	private int paddle_l;
	private int paddle_r;
	private int _ballX;
	private int _ballY;
	private int ballDX;
	private int ballDY;
	//private int playerCount = 0;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("import", "/javascript/canvas.js");
		}
	}

	private async Task Send()
	{
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", user);
		}
	}
	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
			.Build();

		hubConnection.On<string>("ReceiveMessage", (user) =>
		{
			var encodedMsg = $"{user}" + " has joined the game!!";
			messages.Add(encodedMsg);
			InvokeAsync(StateHasChanged);

		});

		hubConnection.On<int>("AssignPlayerId", (playerId) =>
	{
		_playerId = playerId;
		_isGameStarted = true;
	});

		
		hubConnection.On<int, int>("PaddleMoved", (playerId, newY) =>
		{
			if (playerId == 1)
			{
				paddle_l = newY;
			}
			else if (playerId == 2)
			{
				paddle_r = newY;
			}
		});

		hubConnection.On<int, int>("BallMoved", (newX, newY) =>
	{
		_ballX += ballDX;
		_ballY += ballDY;
	});
		await hubConnection.StartAsync();
	}


	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "ArrowUp")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 1, paddle_l - 20);
			}
		}
		else if (e.Code == "ArrowDown")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 1, paddle_l + 20);
			}
		}
	}

	private async Task OnKeyUp(KeyboardEventArgs e)
	{
		if (e.Code == "w")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 1, paddle_l+20);
			}

		}
		else if (e.Code == "s")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 1, paddle_l+20);
			}
		}
		if (e.Code == "ArrowUp")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 2, paddle_l);
			}

		}
		else if (e.Code == "ArrowDown")
		{
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("MovePaddle", 2, paddle_l);
			}
		}
	}

	public bool IsConnected =>
		hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}